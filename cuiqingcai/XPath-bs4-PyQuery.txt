xpath:
from lxml import etree
text = '''
<div>
    <ul>
         <li class="item-0"><a href="link1.html">first item</a></li>
         <li class="item-1"><a href="link2.html">second item</a></li>
         <li class="item-inactive"><a href="link3.html">third item</a></li>
         <li class="item-1"><a href="link4.html">fourth item</a></li>
         <li class="item-0"><a href="link5.html">fifth item</a>
         <li class="li li-first name="item"><a href="link.html">first item</a></li>
     </ul>
 </div>
'''
html = etree.HTML(text)

result = etree.tostring(html)
print(result.decode('utf-8'))   #调用tostring()方法即可输出修正后的HTML代码，但是结果是bytes类型。这里利用decode()方法将其转成str类型

html = etree.parse('./test.html', etree.HTMLParser())   #直接读取文本文件进行解析

result = html.xpath('//a[@href="link4.html"]/../@class')
result = html.xpath('//a[@href="link4.html"]/parent::*/@class') #先选中href属性为link4.html的a节点，然后再获取其父节点，然后再获取其class属性

result = html.xpath('//li[@class="li li-first"]/a/text()')
result = html.xpath('//li[contains(@class, "li")]/a/text()')
result = html.xpath('//li[contains(@class, "li") and @name="item"]/a/text()')

result = html.xpath('//li[1]/a/text()')
result = html.xpath('//li[last()]/a/text()')
result = html.xpath('//li[position()<3]/a/text()')
result = html.xpath('//li[last()-2]/a/text()')
result = html.xpath('//li[1]/ancestor::*')   #获取所有祖先节点
result = html.xpath('//li[1]/ancestor::div')
result = html.xpath('//li[1]/attribute::*') #获取所有属性值
result = html.xpath('//li[1]/child::a[@href="link1.html"]') #选取href属性为link1.html的a节点
result = html.xpath('//li[1]/descendant::span') #获取所有子孙节点。这里加了限定条件获取span节点
result = html.xpath('//li[1]/following::*[2]')  #获取当前节点之后的所有节点。这里虽然使用的是*匹配，但又加了索引选择，所以只获取了第二个后续节点
result = html.xpath('//li[1]/following-sibling::*') #可以获取当前节点之后的所有同级节点。这里使用*匹配，所以获取了所有后续同级节点




BeautifulSoup:
html = """
<html><head><title>The Dormouse's story</title></head>
<body>
<p class="title" name="dromouse"><b>The Dormouse's story</b></p>
<p class="story">Once upon a time there were three little sisters; and their names were
<a href="http://example.com/elsie" class="sister" id="link1"><!-- Elsie --></a>,
<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
and they lived at the bottom of a well.</p>
<p class="story">...</p>
"""
from bs4 import BeautifulSoup
soup = BeautifulSoup(html, 'lxml')  #自动更正格式

print(soup.prettify())  #把要解析的字符串以标准的缩进格式输出
print(soup.title.string)    #输出HTML中title节点的文本内容
print(soup.title.get_text())    #输出HTML中title节点的文本内容
print(soup.p)   #只会选择到第一个匹配的节点，其他的后面节点都会忽略
print(soup.title.name)  #获取节点的名称

print(soup.p.attrs) #attrs的返回结果是字典形式
print(soup.p.attrs['name'])
print(soup.p['class'])   #有的返回结果是字符串，有的返回结果是字符串组成的列表。比如，name属性的值是唯一的，返回的结果就是单个字符串。而对于class，一个节点元素可能有多个class，所以返回的是列表

print(soup.p.children)  #返回结果是生成器
print(soup.p.contents)  #获取p的直接子节点,包含文本，又包含节点，最后会将它们以列表形式统一返回
print(soup.p.descendants)   #得到所有的子孙节点,返回结果还是生成器
print(soup.a.parent)    #获取某个节点元素的直接父节点
print(list(enumerate(soup.a.parents)))  #想获取所有的祖先节点

print('Next Sibling', soup.a.next_sibling)
print('Prev Sibling', soup.a.previous_sibling)  #获取节点的下一个和上一个兄弟元素
print('Next Siblings', list(enumerate(soup.a.next_siblings)))
print('Prev Siblings', list(enumerate(soup.a.previous_siblings)))   #返回所有前面和后面的兄弟节点的生成器

find_all(name , attrs , recursive=True , text , **kwargs)
print(soup.find_all(name='ul'))
print(soup.find_all(attrs={'id': 'list-1'}))
print(soup.find_all(id='list-1'))
print(soup.find_all(class_='element'))  #对于一些常用的属性，可以不用attrs来传递。比如，要查询id为list-1的节点，可以直接传入id这个参数
print(soup.find_all(text=re.compile('link')))   #text参数可用来匹配节点的文本，传入的形式可以是字符串，可以是正则表达式对象
soup.find(string=re.compile("最后编辑时间"))

print(soup.select('.panel .panel-heading')) #注意空格，选取class="panel"节点下的class="panel-heading"的子节点
print(soup.select('.panel.panel-heading')) #选取class="panel panel-heading"的节点
print(soup.select('ul li')) #选择所有ul节点下面的所有li节点
print(soup.select('#list-2 .element'))  #选择id="list-2"节点下的class="element"的所有子节点




pyquery:
html = '''
<div id="container">
    <ul class="list">
         <li class="item-0">first item</li>
         <li class="item-1"><a href="link2.html">second item</a></li>
         <li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>
         <li class="item-1 active"><a href="link4.html">fourth item</a></li>
         <li class="item-0"><a href="link5.html">fifth item</a></li>
     </ul>
 </div>
'''
from pyquery import PyQuery as pq

doc = pq(html)
print(doc('li'))    #选择所有的li节点
doc = pq(url='http://cuiqingcai.com')
print(doc('title')) #PyQuery对象会首先请求这个URL，然后用得到的HTML内容完成初始
doc = pq(filename='demo.html')
print(doc('li'))    #读取本地的文件内容，然后用文件内容以字符串的形式传递给PyQuery类来初始化

print(doc('#container .list li'))   ##先选取id为container的节点，然后再选取其内部的class为list的节点内部的所有li节点
items = doc('.list')
print(items.find('li')) #选取class为list的节点，然后调用了find()方法，传入CSS选择器，选取其内部所有的li子孙节点
print(items.children())   #只查找子节点
print(items.children('.active'))    #筛选所有子节点中符合条件的节点
print(items.parent())   #查找直接父节点
print(items.parents())   #查找祖先节点
print(items.parents('.wrap'))   #查找某个祖先节点

li = doc('.list .item-0.active')
print(li.siblings())    #先选择class为list的节点内部class为item-0和active的节点，也就是第三个li节点。那么，很明显，它的兄弟节点有4个
print(li.siblings('.active'))

lis = doc('li').items() #调用items()方法后，会得到一个生成器，遍历一下，就可以逐个得到li节点对象了
for li in lis:
    print(li, type(li))

a = doc('.item-0.active a')
print(a.attr('href'))   #选中class为item-0和active的li节点内的a节点，获取href属性
print(a.attr.href)  #如果选中的是多个元素，然后调用attr()方法,只会得到第一个节点的属性,遇到这种情况时，如果想获取所有的a节点的属性，就要用到前面的遍历了
print(a.text()) #获取节点内部的文本

li = doc('.item-0.active')
print(li.html())    #获取这个节点内部的HTML文本
li = doc('li')  #如果我们选中的结果是多个节点
print(li.html())    #html()方法返回的是第一个li节点的内部HTML文本
print(li.text())    #text()则返回了所有的li节点内部的纯文本，中间用一个空格分割开，即返回结果是一个字符串

li = doc('.item-0.active')
li.removeClass('active')
li.addClass('active')   #首先选中了第三个li节点，然后调用removeClass()方法，将li节点的active这个class移除，后来又调用addClass()方法，将class添加回来
结果：
<li class="item-0"><a href="link3.html"><span class="bold">third item</span></a></li>
<li class="item-0 active"><a href="link3.html"><span class="bold">third item</span></a></li>

li.attr('name', 'link') #调用attr()方法来修改属性，其中该方法的第一个参数为属性名，第二个参数为属性值
li.text('changed item') #修改li节点内部的文本
li.html('<span>changed item</span>')    #调用html()方法传入HTML文本
结果：
<li class="item-0 active" name="link"><a href="link3.html"><span class="bold">third item</span></a></li>
<li class="item-0 active" name="link">changed item</li>
<li class="item-0 active" name="link"><span>changed item</span></li>

html = '''
<div class="wrap">
    Hello, World
    <p>This is a paragraph.</p>
 </div>
'''
doc = pq(html)  #想提取Hello, World这个字符串，而不要p节点内部的字符串
wrap = doc('.wrap')
print(wrap.text())  #结果Hello, World This is a paragraph.
wrap.find('p').remove()
print(wrap.text())  #首先选中p节点，然后调用了remove()方法将其移除，然后这时wrap内部就只剩下Hello, World这句话了，然后再利用text()方法提取即可

li = doc('li:first-child')  #选择了第一个li节点
li = doc('li:last-child')   #最后一个li节点
li = doc('li:nth-child(2)') #第二个li节点
li = doc('li:gt(2)')    #第三个li之后的li节点
li = doc('li:nth-child(2n)')    #偶数位置的li节点
li = doc('li:contains(second)')    #包含second文本的li节点